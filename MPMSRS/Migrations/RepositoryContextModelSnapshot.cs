// <auto-generated />
using System;
using MPMSRS.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MPMSRS.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MPMSRS.Models.Entities.Assignments", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("AssignmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NetworkId");

                    b.ToTable("TB_Assignments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Attachments", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AttachmentMime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AttachmentId");

                    b.ToTable("TB_Attachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Authentications", b =>
                {
                    b.Property<Guid>("AuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Otp")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserData")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AuthenticationId");

                    b.ToTable("TB_Authentications");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ChecklistEvidences", b =>
                {
                    b.Property<Guid>("ChecklistEvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("ChecklistEvidenceId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ChecklistId");

                    b.ToTable("TB_Checklist_Evidences");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ChecklistPICs", b =>
                {
                    b.Property<Guid>("ChecklistPICId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("ChecklistPICId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TB_Checklist_PICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Checklists", b =>
                {
                    b.Property<Guid>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChecklistActualCondition")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChecklistActualDetail")
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ChecklistDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChecklistFix")
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ChecklistIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChecklistItem")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChecklistStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChecklistId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("VisitingId");

                    b.ToTable("TB_Checklists");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionAttachments", b =>
                {
                    b.Property<Guid>("CorrectiveActionAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrectiveActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("CorrectiveActionAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CorrectiveActionId");

                    b.ToTable("TB_Corrective_Action_Attachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionPICs", b =>
                {
                    b.Property<Guid>("CorrectiveActionPICId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrectiveActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("CorrectiveActionPICId");

                    b.HasIndex("CorrectiveActionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TB_Corrective_Action_PICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionProblemCategories", b =>
                {
                    b.Property<Guid>("CorrectiveActionPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrectiveActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectiveActionPCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("CorrectiveActionPCId");

                    b.HasIndex("CorrectiveActionId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("TB_Corrective_Action_Problem_Categories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActions", b =>
                {
                    b.Property<Guid>("CorrectiveActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectiveActionDetail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CorrectiveActionName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProgressBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("ValidateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("VisitingDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CorrectiveActionId");

                    b.HasIndex("VisitingDetailReportId");

                    b.ToTable("TB_Corrective_Actions");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Divisions", b =>
                {
                    b.Property<Guid>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("DivisionId");

                    b.ToTable("TB_Divisions");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAAttachments", b =>
                {
                    b.Property<Guid>("EventCAAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EventCAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventCAAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("EventCAId");

                    b.ToTable("TB_Event_Corrective_Action_Attachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAPICs", b =>
                {
                    b.Property<Guid>("EventCAPICId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventCAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventCAPICId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventCAId");

                    b.ToTable("TB_Event_Corrective_Action_PICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAProblemCategories", b =>
                {
                    b.Property<Guid>("EventCAPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EventCAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventCAPCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventCAPCId");

                    b.HasIndex("EventCAId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("TB_Event_Corrective_Action_Problem_Categories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAs", b =>
                {
                    b.Property<Guid>("EventCAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("EventCADetail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventCAName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("EventDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProgressBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("ValidateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventCAId");

                    b.HasIndex("EventDetailReportId");

                    b.ToTable("TB_Event_Corrective_Actions");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportAttachments", b =>
                {
                    b.Property<Guid>("EventDetailReportAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EventDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventDetailReportAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("EventDetailReportId");

                    b.ToTable("TB_Event_Detail_Report_Attachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportPICs", b =>
                {
                    b.Property<Guid>("EventDetailReportPICId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventDetailReportPICId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventDetailReportId");

                    b.ToTable("TB_Event_Detail_Report_PICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportProblemCategories", b =>
                {
                    b.Property<Guid>("EventDetailReportPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EventDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventDetailReportPCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventDetailReportPCId");

                    b.HasIndex("EventDetailReportId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("TB_Event_Detail_Report_Problem_Categories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReports", b =>
                {
                    b.Property<Guid>("EventDetailReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventCAProblemIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EventDetailReportDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDetailReportFlagging")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EventDetailReportProblemIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventDetailReportStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventMasterDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventDetailReportId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventMasterDataId");

                    b.ToTable("TB_Event_Detail_Reports");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventMasterDatas", b =>
                {
                    b.Property<Guid>("EventMasterDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EventMasterDataLatitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventMasterDataLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventMasterDataLongitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventMasterDataName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventMasterDataId");

                    b.ToTable("TB_Event_Master_Datas");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventPeoples", b =>
                {
                    b.Property<Guid>("EventPeopleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("EventPeopleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("TB_Event_Peoples");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Events", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedByGM")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApprovedByManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EventComment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("EventMasterDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("EventMasterDataId");

                    b.HasIndex("VisitingTypeId");

                    b.ToTable("TB_Events");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Networks", b =>
                {
                    b.Property<Guid>("NetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNum")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AhmCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ChannelDealer")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("DLREmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(33)
                        .IsUnicode(false)
                        .HasColumnType("varchar(33)");

                    b.Property<string>("IdKaresidenanHC3")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("IdKaresidenanTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Karesidenan")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("KodeKareswil")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("MDCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("NPKDeptHeadHC3")
                        .HasColumnType("int");

                    b.Property<string>("NPKDeptHeadTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("NPKDivHeadHC3")
                        .HasColumnType("int");

                    b.Property<string>("NPKDivHeadTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("NPKSpvHC3")
                        .HasColumnType("int");

                    b.Property<string>("NPKSpvTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NPKSupervisor")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("NamaDeptHeadHC3")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("NamaDeptHeadTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NamaDivHeadHC3")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("NamaDivHeadTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NamaKaresHC3")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NamaKaresTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NamaSPVHC3")
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("varchar(23)");

                    b.Property<string>("NamaSPVTSD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NamaSupervisor")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NetworkLatitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NetworkLongitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("NetworkId");

                    b.ToTable("TB_Networks");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Positions", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Channel")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("GroupJabatanId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("KodeJabatan")
                        .HasColumnType("int");

                    b.Property<string>("NamaGroupPosition")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NamaJabatan")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("PositionId");

                    b.ToTable("TB_Positions");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ProblemCategories", b =>
                {
                    b.Property<Guid>("ProblemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProblemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("ProblemCategoryId");

                    b.ToTable("TB_Problem_Categories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.PushNotifications", b =>
                {
                    b.Property<Guid>("PushNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("PushNotificationBody")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PushNotificationTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Screen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ScreenID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("PushNotificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RecipientId");

                    b.ToTable("TB_PushNotifications");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Ranks", b =>
                {
                    b.Property<Guid>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("UserBOD")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserBODName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserGM")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserGMName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserManagerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserStaff")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserStaffName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RankId");

                    b.ToTable("TB_Ranks");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Roles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("RoleId");

                    b.ToTable("TB_Roles");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserFcmTokens", b =>
                {
                    b.Property<Guid>("UserFcmTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("UserFcmTokenId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TB_UserFcmTokens");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserNetworkMappings", b =>
                {
                    b.Property<Guid>("UserNetworkMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("UserNetworkMappingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NetworkId");

                    b.ToTable("TB_User_Network_Mappings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserProblemCategoryMappings", b =>
                {
                    b.Property<Guid>("UserProblemCategoryMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("UserProblemCategoryMappingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("TB_User_Problem_Category_Mappings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("Department")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DisplayName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("InternalTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Phone")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("Username")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("WorkLocation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_Users");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportAttachments", b =>
                {
                    b.Property<Guid>("VisitingDetailReportAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitingDetailReportAttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("VisitingDetailReportId");

                    b.ToTable("TB_Visiting_Detail_Report_Attachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportPICs", b =>
                {
                    b.Property<Guid>("VisitingDetailReportPICId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitingDetailReportPICId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VisitingDetailReportId");

                    b.ToTable("TB_Visiting_Detail_Report_PICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportProblemCategories", b =>
                {
                    b.Property<Guid>("VisitingDetailReportPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ProblemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingDetailReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VisitingDetailReportPCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VisitingDetailReportPCId");

                    b.HasIndex("ProblemCategoryId");

                    b.HasIndex("VisitingDetailReportId");

                    b.ToTable("TB_Visiting_Detail_Report_Problem_Categories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReports", b =>
                {
                    b.Property<Guid>("VisitingDetailReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectiveActionProblemIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime?>("VisitingDetailReportDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitingDetailReportFlagging")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VisitingDetailReportProblemIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VisitingDetailReportStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("VisitingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitingDetailReportId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("VisitingId");

                    b.ToTable("TB_Visiting_Detail_Reports");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingNoteMappings", b =>
                {
                    b.Property<Guid>("VisitingNoteMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VisitingNoteMappingDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("VisitingNoteMappingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VisitingId");

                    b.ToTable("TB_Visiting_Note_Mappings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingPeoples", b =>
                {
                    b.Property<Guid>("VisitingPeopleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<Guid>("VisitingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitingPeopleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VisitingId");

                    b.ToTable("TB_Visiting_Peoples");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingTypes", b =>
                {
                    b.Property<Guid>("VisitingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("VisitingTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VisitingTypeId");

                    b.ToTable("TB_Visiting_Types");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Visitings", b =>
                {
                    b.Property<Guid>("VisitingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedByGM")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApprovedByManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<string>("VisitingComment")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VisitingCommentByManager")
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VisitingStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("VisitingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitingId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("VisitingTypeId");

                    b.ToTable("TB_Visitings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Assignments", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Divisions", "Division")
                        .WithMany("Assignments")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_Assignments_Divisions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Assignments_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Networks", "Network")
                        .WithMany("Assignments")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_Assignments_Networks")
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Network");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ChecklistEvidences", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("ChecklistEvidences")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_ChecklistEvidences_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Checklists", "Checklist")
                        .WithMany("ChecklistEvidences")
                        .HasForeignKey("ChecklistId")
                        .HasConstraintName("FK_ChecklistEvidences_Checklists")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ChecklistPICs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Checklists", "Checklist")
                        .WithMany("ChecklistPICs")
                        .HasForeignKey("ChecklistId")
                        .HasConstraintName("FK_ChecklistPICs_Checklists")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("ChecklistPICs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_ChecklistPICs_Users")
                        .IsRequired();

                    b.Navigation("Checklist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Checklists", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("Checklists")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Checklists_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Networks", "Network")
                        .WithMany("Checklists")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_Checklists_Networks")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Visitings", "Visiting")
                        .WithMany("Checklists")
                        .HasForeignKey("VisitingId")
                        .HasConstraintName("FK_Checklists_Visitings")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Network");

                    b.Navigation("Visiting");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionAttachments", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("CorrectiveActionAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_CorrectiveActionAttachments_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.CorrectiveActions", "CorrectiveAction")
                        .WithMany("CorrectiveActionAttachments")
                        .HasForeignKey("CorrectiveActionId")
                        .HasConstraintName("FK_CorrectiveActionAttachments_CorrectiveActions")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CorrectiveAction");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionPICs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.CorrectiveActions", "CorrectiveAction")
                        .WithMany("CorrectiveActionPICs")
                        .HasForeignKey("CorrectiveActionId")
                        .HasConstraintName("FK_CorrectiveActionPICs_CorrectiveActions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("CorrectiveActionPICs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_CorrectiveActionPICs_Users")
                        .IsRequired();

                    b.Navigation("CorrectiveAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActionProblemCategories", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.CorrectiveActions", "CorrectiveAction")
                        .WithMany("CorrectiveActionProblemCategories")
                        .HasForeignKey("CorrectiveActionId")
                        .HasConstraintName("FK_CorrectiveActionProblemCategories_CorrectiveActions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.ProblemCategories", "ProblemCategory")
                        .WithMany("CorrectiveActionProblemCategories")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("FK_CorrectiveActionProblemCategories_ProblemCategories")
                        .IsRequired();

                    b.Navigation("CorrectiveAction");

                    b.Navigation("ProblemCategory");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActions", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.VisitingDetailReports", "VisitingDetailReport")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("VisitingDetailReportId")
                        .HasConstraintName("FK_CorrectiveActions_VisitingDetailReports")
                        .IsRequired();

                    b.Navigation("VisitingDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAAttachments", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("EventCAAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_EventCorrectiveActionAttachments_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.EventCAs", "EventCA")
                        .WithMany("EventCAAttachments")
                        .HasForeignKey("EventCAId")
                        .HasConstraintName("FK_EventCorrectiveActionAttachments_EventCorrectiveActions")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("EventCA");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAPICs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("EventCAPICs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EventCorrectiveActionPICs_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.EventCAs", "EventCA")
                        .WithMany("EventCAPICs")
                        .HasForeignKey("EventCAId")
                        .HasConstraintName("FK_EventCorrectiveActionPICs_EventCorrectiveActions")
                        .IsRequired();

                    b.Navigation("EventCA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAProblemCategories", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.EventCAs", "EventCA")
                        .WithMany("EventCAProblemCategories")
                        .HasForeignKey("EventCAId")
                        .HasConstraintName("FK_EventCorrectiveActionProblemCategories_EventCorrectiveActions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.ProblemCategories", "ProblemCategory")
                        .WithMany("EventCAProblemCategories")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("FK_EventCorrectiveActionProblemCategories_ProblemCategories")
                        .IsRequired();

                    b.Navigation("EventCA");

                    b.Navigation("ProblemCategory");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.EventDetailReports", "EventDetailReport")
                        .WithMany("EventCAs")
                        .HasForeignKey("EventDetailReportId")
                        .HasConstraintName("FK_EventCorrectiveActions_EventDetailReports")
                        .IsRequired();

                    b.Navigation("EventDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportAttachments", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("EventDetailReportAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_EventDetailReportAttachments_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.EventDetailReports", "EventDetailReport")
                        .WithMany("EventDetailReportAttachments")
                        .HasForeignKey("EventDetailReportId")
                        .HasConstraintName("FK_EventDetailReportAttachments_EventDetailReports")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("EventDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportPICs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("EventDetailReportPICs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EventDetailReportPICs_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.EventDetailReports", "EventDetailReport")
                        .WithMany("EventDetailReportPICs")
                        .HasForeignKey("EventDetailReportId")
                        .HasConstraintName("FK_EventDetailReportPICs_EventDetailReports")
                        .IsRequired();

                    b.Navigation("EventDetailReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReportProblemCategories", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.EventDetailReports", "EventDetailReport")
                        .WithMany("EventDetailReportProblemCategories")
                        .HasForeignKey("EventDetailReportId")
                        .HasConstraintName("FK_EventDetailReportProblemCategories_EventDetailReports")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.ProblemCategories", "ProblemCategory")
                        .WithMany("EventDetailReportProblemCategories")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("FK_EventDetailReportProblemCategories_ProblemCategories")
                        .IsRequired();

                    b.Navigation("EventDetailReport");

                    b.Navigation("ProblemCategory");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReports", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Divisions", "Division")
                        .WithMany("EventDetailReports")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_EventDetailReports_Divisions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Events", "Event")
                        .WithMany("EventDetailReports")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventDetailReports_Events")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.EventMasterDatas", "EventMasterData")
                        .WithMany("EventDetailReports")
                        .HasForeignKey("EventMasterDataId")
                        .HasConstraintName("FK_EventDetailReports_EventMasterDatas")
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Event");

                    b.Navigation("EventMasterData");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventPeoples", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("EventPeoples")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EventPeoples_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Events", "Event")
                        .WithMany("EventPeoples")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventPeoples_Events")
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Events", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.EventMasterDatas", "EventMasterData")
                        .WithMany("Events")
                        .HasForeignKey("EventMasterDataId")
                        .HasConstraintName("FK_Events_EventMasterDatas")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.VisitingTypes", "VisitingType")
                        .WithMany("Events")
                        .HasForeignKey("VisitingTypeId")
                        .HasConstraintName("FK_Events_VisitingTypes")
                        .IsRequired();

                    b.Navigation("EventMasterData");

                    b.Navigation("VisitingType");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.PushNotifications", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("PushNotifications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_PushNotifications_UserSender")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Users", "UserRecipient")
                        .WithMany("PushNotificationRecipients")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_PushNotificationRecipients_UserRecipients")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRecipient");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("RefreshToken")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_RefreshTokens_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserFcmTokens", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("UserFcmTokens")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_UserFcmTokens_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserNetworkMappings", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("UserNetworkMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_UserNetworkMappings_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Networks", "Network")
                        .WithMany("UserNetworkMappings")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_UserNetworkMappings_Networks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.UserProblemCategoryMappings", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("UserProblemCategoryMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_UserProblemCategoryMappings_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.ProblemCategories", "ProblemCategory")
                        .WithMany("UserProblemCategoryMappings")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("FK_UserProblemCategoryMappings_ProblemCategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProblemCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Users", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("Users")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_Users_Attachments");

                    b.HasOne("MPMSRS.Models.Entities.Divisions", "Division")
                        .WithMany("Users")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_Users_Divisions");

                    b.HasOne("MPMSRS.Models.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Attachment");

                    b.Navigation("Division");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportAttachments", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Attachments", "Attachment")
                        .WithMany("VisitingDetailReportAttachments")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_VisitingDetailReportAttachments_Attachments")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.VisitingDetailReports", "VisitingDetailReport")
                        .WithMany("VisitingDetailReportAttachments")
                        .HasForeignKey("VisitingDetailReportId")
                        .HasConstraintName("FK_VisitingDetailReportAttachments_VisitingDetailReports")
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("VisitingDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportPICs", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("VisitingDetailReportPICs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_VisitingDetailReportPICs_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.VisitingDetailReports", "VisitingDetailReport")
                        .WithMany("VisitingDetailReportPICs")
                        .HasForeignKey("VisitingDetailReportId")
                        .HasConstraintName("FK_VisitingDetailReportPICs_VisitingDetailReports")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitingDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReportProblemCategories", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.ProblemCategories", "ProblemCategory")
                        .WithMany("VisitingDetailReportProblemCategories")
                        .HasForeignKey("ProblemCategoryId")
                        .HasConstraintName("FK_VisitingDetailReportProblemCategories_ProblemCategories")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.VisitingDetailReports", "VisitingDetailReport")
                        .WithMany("VisitingDetailReportProblemCategories")
                        .HasForeignKey("VisitingDetailReportId")
                        .HasConstraintName("FK_VisitingDetailReportProblemCategories_VisitingDetailReports")
                        .IsRequired();

                    b.Navigation("ProblemCategory");

                    b.Navigation("VisitingDetailReport");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReports", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Divisions", "Division")
                        .WithMany("VisitingDetailReports")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_VisitingDetailReports_Divisions")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Networks", "Network")
                        .WithMany("VisitingDetailReports")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_VisitingDetailReports_Networks")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Visitings", "Visiting")
                        .WithMany("VisitingDetailReports")
                        .HasForeignKey("VisitingId")
                        .HasConstraintName("FK_VisitingDetailReports_Visitings")
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Network");

                    b.Navigation("Visiting");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingNoteMappings", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("VisitingNoteMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_VisitingNoteMappings_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Visitings", "Visiting")
                        .WithMany("VisitingNoteMappings")
                        .HasForeignKey("VisitingId")
                        .HasConstraintName("FK_VisitingNoteMappings_Visitings")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Visiting");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingPeoples", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Users", "User")
                        .WithMany("VisitingPeoples")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_VisitingPeoples_Users")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.Visitings", "Visiting")
                        .WithMany("VisitingPeoples")
                        .HasForeignKey("VisitingId")
                        .HasConstraintName("FK_VisitingPeoples_Visitings")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Visiting");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Visitings", b =>
                {
                    b.HasOne("MPMSRS.Models.Entities.Networks", "Network")
                        .WithMany("Visitings")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_Visitings_Networks")
                        .IsRequired();

                    b.HasOne("MPMSRS.Models.Entities.VisitingTypes", "VisitingType")
                        .WithMany("Visitings")
                        .HasForeignKey("VisitingTypeId")
                        .HasConstraintName("FK_Visitings_VisitingTypes")
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("VisitingType");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Attachments", b =>
                {
                    b.Navigation("ChecklistEvidences");

                    b.Navigation("Checklists");

                    b.Navigation("CorrectiveActionAttachments");

                    b.Navigation("EventCAAttachments");

                    b.Navigation("EventDetailReportAttachments");

                    b.Navigation("Users");

                    b.Navigation("VisitingDetailReportAttachments");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Checklists", b =>
                {
                    b.Navigation("ChecklistEvidences");

                    b.Navigation("ChecklistPICs");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.CorrectiveActions", b =>
                {
                    b.Navigation("CorrectiveActionAttachments");

                    b.Navigation("CorrectiveActionPICs");

                    b.Navigation("CorrectiveActionProblemCategories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Divisions", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("EventDetailReports");

                    b.Navigation("Users");

                    b.Navigation("VisitingDetailReports");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventCAs", b =>
                {
                    b.Navigation("EventCAAttachments");

                    b.Navigation("EventCAPICs");

                    b.Navigation("EventCAProblemCategories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventDetailReports", b =>
                {
                    b.Navigation("EventCAs");

                    b.Navigation("EventDetailReportAttachments");

                    b.Navigation("EventDetailReportPICs");

                    b.Navigation("EventDetailReportProblemCategories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.EventMasterDatas", b =>
                {
                    b.Navigation("EventDetailReports");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Events", b =>
                {
                    b.Navigation("EventDetailReports");

                    b.Navigation("EventPeoples");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Networks", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Checklists");

                    b.Navigation("UserNetworkMappings");

                    b.Navigation("VisitingDetailReports");

                    b.Navigation("Visitings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.ProblemCategories", b =>
                {
                    b.Navigation("CorrectiveActionProblemCategories");

                    b.Navigation("EventCAProblemCategories");

                    b.Navigation("EventDetailReportProblemCategories");

                    b.Navigation("UserProblemCategoryMappings");

                    b.Navigation("VisitingDetailReportProblemCategories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Users", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ChecklistPICs");

                    b.Navigation("CorrectiveActionPICs");

                    b.Navigation("EventCAPICs");

                    b.Navigation("EventDetailReportPICs");

                    b.Navigation("EventPeoples");

                    b.Navigation("PushNotificationRecipients");

                    b.Navigation("PushNotifications");

                    b.Navigation("RefreshToken");

                    b.Navigation("UserFcmTokens");

                    b.Navigation("UserNetworkMappings");

                    b.Navigation("UserProblemCategoryMappings");

                    b.Navigation("VisitingDetailReportPICs");

                    b.Navigation("VisitingNoteMappings");

                    b.Navigation("VisitingPeoples");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingDetailReports", b =>
                {
                    b.Navigation("CorrectiveActions");

                    b.Navigation("VisitingDetailReportAttachments");

                    b.Navigation("VisitingDetailReportPICs");

                    b.Navigation("VisitingDetailReportProblemCategories");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.VisitingTypes", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Visitings");
                });

            modelBuilder.Entity("MPMSRS.Models.Entities.Visitings", b =>
                {
                    b.Navigation("Checklists");

                    b.Navigation("VisitingDetailReports");

                    b.Navigation("VisitingNoteMappings");

                    b.Navigation("VisitingPeoples");
                });
#pragma warning restore 612, 618
        }
    }
}
